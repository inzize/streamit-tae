// Code adapted FROM formSARimage.m
// (rodric rabbah, <rabbah@mit.edu>)
//
// % Function formSARimage() - part of Kernel 1 - Given the raw SAR complex 
// % data, forms the SAR image.
// %
// % Modified companion code to Mehrdad Soumekh's text book "Synthetic Aperture 
// % Radar Signal Processing with Matlab Algorithms", Wiley, New York, NY, 1999.
// %
// % This function digitally reconstructs the SAR image using spatial frequency 
// % interpolation (see noted text, Section 4.5).

void->void pipeline SAR()
{
    // genRawSAR.m
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // %% u domain parameters and arrays for compressed SAR signal %%
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    float duc = ((Xc * lambda_min) / (4 * Y0)) / 1.2;

    /* number of samples on aperture */
    int   mc  = 2 * (int) ceil(L / duc);

    float dku = PI2 / ((float) mc * duc);
          
    /* synthetic aperture array */
    float[mc] uc;           
    float[mc] kuc;

    for (int i = 0; i < mc; i++) {
        uc[i]  = duc * (((float) i) - ((float) mc) / 2.0);
        kuc[i] = dku * (((float) i) - ((float) mc) / 2.0);
    }

    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // %%    u domain parameters and arrays for SAR signal     %%
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    float theta_min = atan((0 - Y0 - L) / (Xc - X0));
    float theta_max = atan((Y0 + L) / (Xc - X0)); 
    
    float du = lambda_min / (1.4 * 2 * (sin(theta_max) - sin(theta_min)));

    /* number of samples on aperture */
    int   m  = 2 * (int) ceil(PI / (du * dku));
          du = PI2 / (m * dku);                   
    
    /* synthetic aperture array */
    float[m] u;
    float[m] ku;           

    for (int i = 0; i < m; i++) {
        u[i]  = du  * (((float) i) - ((float) m) / 2.0);
        ku[i] = dku * (((float) i) - ((float) m) / 2.0);
    }
    
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // %%       Fast-time domain parmeters and arrays          %%
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    float Ts   = (2 / c) * Rmin; 
    float Tf   = (2 / c) * Rmax + Tp;
    float T    = Tf - Ts;
    Ts         = Ts - 0.1 * T;  
    Tf         = Tf + 0.1 * T;  
    T          = Tf - Ts;
    float Tmin = max(T, (4 * X0) / (c * cos(theta_max))); 
    float dt   = 1 / (4 * f0);

    /* number of time samples */
    int   n    = 2 * (int) ceil((0.5 * Tmin) / dt);     
    
    /* Wavenumber array */
    float[n] t;
    float[n] k;
    
    for (int i = 0; i < n; i++) {
        t[i] = Ts + i * dt;
        k[i] = (PI2 / c) * (fc + 4 * f0 * (((float) i) - ((float) n) / 2.0) / n);
    }
    
    // Generate Raw Image
    add void->int filter { // NOTE: mock filter to ger around compiler limitation w.r.t. null splitters
        work push 1 { push(1); }
    }

    add int->complex splitjoin {
        split duplicate;
        add FastTimeFilter(n, t);
        add pipeline {
            add genRawSAR(Tf, n, m, mc, t, k, ku, uc);
            add FTX2D(n, mc);
        }
        join roundrobin(1, mc);
    }
        
    add complex->complex filter {
        work pop n+n*mc push n*mc {
            for (int i = 0; i < n; i++) {
                complex ftf = pop();
                for (int j = 0; j < mc; j++) {
                    complex s   = pop();
                    complex out;
                    
                    out.real = s.real * ftf.real - s.imag * ftf.imag;
                    out.imag = s.imag * ftf.real + s.real * ftf.imag;
                    
                    push(out);
                }
            }
        }
    }

    // Digital Spotlighting and Bandwidth Expansion in ku Domain  
    // via Slow-time Compression and Decompression

    //// Compression
    add Compression(n, mc, k, uc);    

    //// Narrow-bandwidth Polar Format Processed reconstruction
    add FTY2D(n, mc);   

    //// Zero-padding in ku domain for slow-time upsampling
    add ZeroPadding(n, m, mc);
    
    //// Transform to (omega,u) domain
    add iFTY2D(n, m);

    //// Decompression
    add Decompression(n, m, k, u);

    //// Digitally-spotlighted SAR signal spectrum
    add FTY2D(n, m);

    // SAR RECONSTRUCTION (multiple stages)
    // - 2D Fourier Matched Filtering and Interpolation
    // - Inverse 2D FFT for spatial domain image
    add Reconstruction(n, m, k, ku);

    // NOTE: to compate to MATLAB output, transpose again
    // add floatTranspose(266, m);
    add FloatPrinter();
}

// print results
float->void filter FloatPrinter() {
    work pop 1 { 
        println(pop());
    }
}

// Zero-padding
complex->complex filter ZeroPadding(int n, 
                                    int m, 
                                    int mc)
{
    int     mz = m - mc;
    float   q  = (float) m / (float) mc;
    complex zero;

    init {
        zero = 0 + 0i;
    }
    
    work push n*m pop n*mc {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if ((j < mz / 2) || ( j >= mc+mz / 2)) {
                    push(zero);
                } else {
                    complex in = pop();
                    complex out;
                    out.real = q * in.real;
                    out.imag = q * in.imag;
                    push(out);
                }
            }
        }
    }
}

// Compression
complex->complex filter Compression(int n, 
                                    int mc, 
                                    float[n] k, 
                                    float[mc] uc)
{
    float[n][mc] cos_value;
    float[n][mc] sin_value;
    
    init {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < mc; j++){
                float value = 2 * (k[i] * (sqrt(pow(Xc, 2) + pow(uc[j], 2)) - Xc));
                
                cos_value[i][j] = cos(value);
                sin_value[i][j] = sin(value);
            }
        }
    }
    
    work push n*mc pop n*mc {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < mc; j++){
                complex in = pop();
                complex out;
                
                out.real = 
                    (in.real * cos_value[i][j]) - 
                    (in.imag * sin_value[i][j]);
                
                out.imag =
                    (in.imag * cos_value[i][j]) + 
                    (in.real * sin_value[i][j]);
                
                push(out);
            }
        }
    }
}

// Decompression
complex->complex filter Decompression(int n, 
                                      int m, 
                                      float[n] k, 
                                      float[m] u)
{
    float[n][m] cos_value;
    float[n][m] sin_value;
    
    init {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++){
                float value = 2 * (k[i] * (sqrt(pow(Xc, 2) + pow(u[j], 2)) - Xc));
                
                cos_value[i][j] = cos(value);
                sin_value[i][j] = sin(value);
            }
        }
    }
    
    work push n*m pop n*m {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++){
                complex in = pop();
                complex out;
                
                out.real = 
                    (in.real * cos_value[i][j]) +
                    (in.imag * sin_value[i][j]);
                
                out.imag =
                    (in.imag * cos_value[i][j]) - 
                    (in.real * sin_value[i][j]);
                
                push(out);
            }
        }
    }
}

// Reconstruction (multiple stages)
complex->float pipeline Reconstruction(int n,
                                       int m,
                                       float[n] k, 
                                       float[m] ku)
{
    add matchedFiltering(n, m, k, ku);

    int nx  = 266;
    add convolutionInterpolation(n, nx, m, k, ku);

    /// Inverse 2D FFT for spatial domain image f(x,y) [p203 fig4.6]
    add iFTY2D(nx, m);
    add iFTX2D(nx, m);
    
    add complexAbsoluate();
    add floatTranspose(nx, m);
}

// matchedFilterting (stage 1 of Reconstruction)
complex->complex filter matchedFiltering(int n,
                                         int m, 
                                         float[n] k, 
                                         float[m] ku)
{
    // NOTE: <kx> is redefined because of a lack of proper support
    // for global arrays; the array itself is too big to be fully 
    // unrolled since it leads to 1.4M lines of code and chokes gcc    
    float[n][m]   kx;
    complex[n][m] fs0;

    init {
        for (int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                float val = (4 * (k[i] * k[i])) - (ku[j] * ku[j]);
                
                if (val > 0) {
                    kx[i][j] = sqrt(val);
                } 
                else { 
                    kx[i][j] = 0; 
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (kx[i][j] > 0) {
                    float value = kx[i][j] * Xc + ku[j] + 0.25 * PI - 2 * k[i] * Xc;
                    fs0[i][j].real = cos(value);
                    fs0[i][j].imag = sin(value);
                }
            }
        }
    }
    
    work pop n*m push n*m {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                complex fs = pop();
                complex out;
                
                out.real = fs.real * fs0[i][j].real - fs.imag * fs0[i][j].imag;
                out.imag = fs.real * fs0[i][j].imag + fs.imag * fs0[i][j].real;
                push(out);
            }
        }
    }
}

// convolutionInterpolation (stage 2 of Reconstruction)
complex->complex filter convolutionInterpolation(int n,
                                                 int nx, 
                                                 int m, 
                                                 float[n] k, 
                                                 float[m] ku)
{
    // NOTE: <kx> is redefined because of a lack of proper support
    // for global arrays; the array itself is too big to be fully 
    // unrolled since it leads to 1.4M lines of code and chokes gcc
    float[n][m] kx;
    float kxmin = 1e25;
    float kxmax = 0;

    float dkx = PI / X0;
    int   is  = 8;
    int   I   = 2 * is + 1;

    float kxs = (float) is * dkx;
    float[nx] KX;

    int[m]      icKX;
    int[I][m]   ikx;
    float[I][m] nKX;
    float[I][m] SINC;
    float[I][m] HAM;

    complex[nx][m] F;

    init {
        for (int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                float val = (4 * (k[i] * k[i])) - (ku[j] * ku[j]);
                
                if (val > 0) {
                    kx[i][j] = sqrt(val);
                } 
                else { 
                    kx[i][j] = 0; 
                }

                if (kxmax < kx[i][j]) {
                    kxmax = kx[i][j];
                }
                if (kxmin > kx[i][j]) {
                    kxmin = kx[i][j];
                }
            }
        }

        for (int i = 0; i < nx; i++) {
            KX[i] = kxmin + ((0 - is) - 2 + i) * dkx;
        }
    }
    
    work push nx*m pop n*m {
        for (int i = 0; i < n; i++) {
            for (int l = 0; l < I; l++) {
                for (int j = 0; j < m; j++) {
                    icKX[j] = (int) round((kx[i][j] - KX[0]) / dkx) + 1;
                    
                    ikx[l][j] = icKX[j] + (l - is);
                    ikx[l][j] = ikx[l][j] + (nx * j);
                    
                    nKX[l][j] = KX[(ikx[l][j] - 1) % nx];
                    
                    float x = (nKX[l][j] - kx[i][j]) / dkx;
                    if (x == 0) {
                        SINC[l][j] = 1;
                    }
                    else {
                        SINC[l][j] = sin(PI * x) / (PI * x);
                    }
                    
                    HAM[l][j] = 0.54 + (0.46 * cos((PI / kxs) * (nKX[l][j] - kx[i][j])));
                }
            }
   
            for (int j = 0; j < I; j++) {
                for(int l = 0; l < m; l++) {
                    complex t = peek((i*m) + l);
                    
                    int ri = (ikx[j][l] - 1) % nx;
                    int ci = (ikx[j][l] - 1) / nx;
                    
                    F[ri][ci].real += t.real * SINC[j][l] * HAM[j][l];
                    F[ri][ci].imag += t.imag * SINC[j][l] * HAM[j][l];
                }
            }
        }

        for (int j = 0; j < nx; j++) {
            for(int l = 0; l < m; l++) {
                push(F[j][l]);
            }
        }
        for (int j = 0; j < n; j++) {
            for(int l = 0; l < m; l++) {
                pop();
            }
        }
    }
}

// Code adapted FROM genRawSAR.m
// (rodric rabbah, <rabbah@mit.edu>)
//
// % SAR signal array [# samples, # samples on aperture]
int->complex filter genRawSAR(float Tf,
                               int n,
                               int m,
                               int mc,
                               float[n] t,
                               float[n] k,
                               float[m] ku,
                               float[mc] uc)
{
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // %%  Pre-determine the pixel size of the eventual image in the   %%
    // %%  X-dimm, to control placement of SAR returns relative to     %%
    // %%  pixel-based templates placement. (Code from formSARimage()) %%
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    float kxmin   = 1e25;
    float kxmax   = 0;
    float dkx     = PI / X0;            
    int   is      = 8;    
    int   nx      = 0;
    float[n][m]   kx;

    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // %%           Parameters of Targets                 %%
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    // % SAR reflectors within digital spotlight filter
    // % [targets in an equally spaced mesh, all with unity
    // % reflection coefficient.]

    /* letter image size */
    int N_pix     = 24;

    float npixx   = 0;
    float npixy   = 0;
    int   xni     = 0;
    int   yni     = 0;
    int   ntarget = 0;
    // NOTE: to statically resolve the value of ntarget requires aggressive
    // constant propagation of kx[][] which is 70K elements in size; so
    // hardcode ntarget = 48 for now
    float[48] xn;
    float[48] yn;
    float[48] fn;
    
    init {
        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        // %%  Pre-determine the pixel size of the eventual image in the   %%
        // %%  X-dimm, to control placement of SAR returns relative to     %%
        // %%  pixel-based templates placement. (Code from formSARimage()) %%
        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        for (int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                float val = (4 * (k[i] * k[i])) - (ku[j] * ku[j]);
                
                if (val > 0) {
                    kx[i][j] = sqrt(val);
                } 
                else { 
                    kx[i][j] = 0; 
                }
                
                if (kxmax < kx[i][j]) {
                    kxmax = kx[i][j];
                }
                if (kxmin > kx[i][j]) {
                    kxmin = kx[i][j];
                }
            }
        }
        
        nx = 2 * (int) ceil((0.5 * (kxmax - kxmin)) / dkx);
        nx = nx + 2 * is + 4;
        
        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        // %%           Parameters of Targets                 %%
        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        npixx = (N_pix / (float) nx) * 2 * X0;
        npixy = (N_pix / (float) m ) * 2 * Y0;

        xni = (int) ((((2 * X0 - ceil(npixx / 2)) 
                       - floor(npixx / 2))
                      / (2 * npixx)) 
                     + 1);
        
        yni = (int) ((((2 * Y0 - ceil(npixy / 2))
                       - floor(npixy / 2))
                      / (2 * npixy))
                     + 1);
        
        /* number of targets */
        ntarget = xni * yni;

        for (int i = 0; i < xni; i++) {
            for (int j = 0; j < yni; j++) {
                xn[i * yni + j] = (floor(npixx / 2) + 2 * npixx * i) - X0;
                yn[i * yni + j] = (floor(npixy / 2) + 2 * npixy * j) - Y0;
                fn[i * yni + j] = 1;
            }
        }
    }

    work pop 1 push n*mc {
        float[n][mc]   td;
        complex[n][mc] S;
        pop();

        for (int h = 0; h < ntarget; h++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < mc; j++){
                    td[i][j] = t[i] - 2 * sqrt(pow(Xc + xn[h], 2) + pow(yn[h] - uc[j], 2)) / c;

                    if ((td[i][j] >= 0.0) && (td[i][j] <= Tp) && (abs(uc[j]) <= L) && (t[i] < Tf)) {
                        float value  = PI2 * ((fc - f0) * td[i][j] + (f0 / Tp) * pow(td[i][j], 2));
                        S[i][j].real += fn[h] * cos(value);
                        S[i][j].imag += fn[h] * sin(value);
                    }
                }
            }
        }
 
        for (int i = 0; i < n; i++) {
            float cos_value = cos(PI2 * fc * t[i]);
            float sin_value = sin(PI2 * fc * t[i]);
            
            for (int j = 0; j < mc; j++) {
                complex out;
                
                out.real = S[i][j].real * cos_value + S[i][j].imag * sin_value;
                out.imag = S[i][j].imag * cos_value - S[i][j].real * sin_value;         
                push(out);
            }
        }
    }
}

int->complex pipeline FastTimeFilter(int n,
						 float[n] t) 
{
    add int->complex filter {
        work pop 1 push n {
            float[n] td0;
            complex[n] s0;
            complex[n] ftf;
            pop();            
            for (int i = 0; i < n; i++) {
                td0[i] = t[i] - 2 * Xc / c;
                if ((td0[i] >= 0.0) && (td0[i] <= Tp)) {
                    float value= PI2 * ((fc - f0) * td0[i] + (f0 / Tp) * pow(td0[i], 2));
                    s0[i].real = cos(value);
                    s0[i].imag = sin(value);
                }

                float value = PI2 * fc * t[i];
                float cos_value = cos(value);
                float sin_value = sin(value);
                
                ftf[i].real = s0[i].real * cos_value + s0[i].imag * sin_value;
                ftf[i].imag = s0[i].imag * cos_value - s0[i].real * sin_value;   
                
                push(ftf[i]);
            }
        }
    }

    add FTX1D(n);
    add Conjugate(n);
}

// Implement FFT/iFFT and related functions FROM ftx.m, fty.m, iftx.m, ifty.m
// (rodric rabbah, <rabbah@mit.edu>)

complex->complex pipeline FTX1D(int rows)
{
    add FFT1Dshift(rows);
    add FFT1D(rows);
    add FFT1Dshift(rows);
}

complex->complex pipeline FTX2D(int rows, int cols) 
{
    add FFT2Dshift(rows, cols);
    add FFT2D(rows, cols);
    add FFT2Dshift(rows, cols);
}

complex->complex pipeline FTY2D(int rows, int cols) 
{
    add Transpose(rows, cols);
    add FFT2Dshift(cols, rows);    
    add FFT2D(cols, rows);
    add FFT2Dshift(cols, rows);    
    add Transpose(cols, rows);
}

complex->complex pipeline iFTX2D(int rows, int cols) 
{
    add FFT2Dshift(rows, cols);
    add iFFT2D(rows, cols);
    add FFT2Dshift(rows, cols);
}


complex->complex pipeline iFTY2D(int rows, int cols) 
{
    add Transpose(rows, cols);
    add FFT2Dshift(cols, rows);    
    add iFFT2D(cols, rows);
    add FFT2Dshift(cols, rows);    
    add Transpose(cols, rows);
}

// transpose a 2D stream
complex->complex filter Transpose(int rows, int cols)
{
    work push rows*cols pop rows*cols {
        for (int j = 0; j < cols; j++)
            for (int i = 0; i < rows; i++)
                push(peek(i * cols + j));
        for (int i = 0; i < rows*cols; i++)
            pop();
    }
}

// 1D FFT shift: swap the two halves of a vector
complex->complex filter FFT1Dshift(int rows) 
{
    int rows_mid;
    
    init {
        if (rows % 2 == 1) {
            rows_mid = (rows - 1) / 2;
        } else {
            rows_mid = rows / 2;
        }
    }
    
    work push rows pop rows {
        for (int i = 0; i < rows; i++) {
            complex t = peek(rows_mid);
            push(t);
            
            if (++rows_mid == rows) {
                rows_mid = 0;
            }
        }
        
        for (int i = 0; i < rows; i++) pop();
    }
}

// 2D FFT shift: criss-cross swap of the four matrix quadrants
// NOTE: if there were a reverse roundrobin joiner, it would be
// trivial to do this data reorganization
complex->complex filter FFT2Dshift(int rows, int cols) 
{
    int rows_mid;
    int cols_mid;

    init {
        if (rows % 2 == 1) {
            rows_mid = (rows - 1) / 2;
        } else {
            rows_mid = rows / 2;
        }
        
        if (cols % 2 == 1) {
            cols_mid = (cols - 1) / 2;
        } else {
            cols_mid = cols / 2;
        }
    }
     
    work push rows*cols pop rows*cols {
        complex[rows][cols] temp;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                temp[rows_mid][cols_mid] = pop();
                
                if (++cols_mid == cols) {
                    cols_mid = 0;
                }
            }
            
            if (++rows_mid == rows) {
                rows_mid = 0;
            }
        }
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                push(temp[i][j]);
            }
        }
    }
}

// 1D FFT
complex->complex filter FFT1D(int rows) 
{
    float[rows] cos_value;
    float[rows] sin_value;
    
    init {
        for (int i = 0; i < rows; i++) {
            cos_value[i] = cos(PI2 * (float)i / (float)rows);
            sin_value[i] = sin(PI2 * (float)i / (float)rows);
        }
    }
    
    work push rows pop rows {
        complex[rows] temp;
        
        for (int i = 0; i < rows; i++) {
            float real = 0;
            float imag = 0;
            
            for (int j = 0; j < rows; j++) {
                int k = (i * j) % rows;
                
                complex t = peek(j);
                real += (t.real * cos_value[k]) + (t.imag * sin_value[k]);
                imag += (t.imag * cos_value[k]) - (t.real * sin_value[k]);
            }
            temp[i].real = real;
            temp[i].imag = imag;
        }
        
        for (int i = 0; i < rows; i++) {
            pop();
            push(temp[i]);
        }
    }
}

// 2D FFT
complex->complex filter FFT2D(int rows, int cols) 
{
    float[rows] cos_value;
    float[rows] sin_value;

    init {
        for (int i = 0; i < rows; i++) {
            cos_value[i] = cos(PI2 * (float)i / (float)rows);
            sin_value[i] = sin(PI2 * (float)i / (float)rows);
        }
    }
    
    work push rows*cols pop rows*cols {
        complex[rows][cols] temp;
    
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                float real = 0;
                float imag = 0;
                
                for (int k = 0; k < rows; k++) {
                    int l = (j * k) % rows;
                    
                    complex t = peek(k * cols + i);

                    real += (t.real * cos_value[l]) + (t.imag * sin_value[l]);
                    imag += (t.imag * cos_value[l]) - (t.real * sin_value[l]);
                }
                temp[j][i].real = real;
                temp[j][i].imag = imag;
            }
        }
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                pop();
                push(temp[i][j]);
            }
        }
    }
}

// 2D iFFT
complex->complex filter iFFT2D(int rows, int cols)
{
    float[rows] cos_value;
    float[rows] sin_value;

    init {
        for (int i = 0; i < rows; i++) {
            cos_value[i] = cos(PI2 * (float)i / (float)rows);
            sin_value[i] = sin(PI2 * (float)i / (float)rows);
        }
    }
    
    work push rows*cols pop rows*cols {
        complex[rows][cols] temp;

        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                float real = 0;
                float imag = 0;
                    
                for (int k = 0; k < rows; k++) {
                    int l = (j * k) % rows;

                    complex t = peek(k * cols + i);

                    real += (t.real * cos_value[l]) - (t.imag * sin_value[l]);
                    imag += (t.imag * cos_value[l]) + (t.real * sin_value[l]);
                }
                temp[j][i].real = real / (float)rows;
                temp[j][i].imag = imag / (float)rows;
            }
        }

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                pop();
                push(temp[i][j]);
            }
        }
    }
}


/*
void->void pipeline FFT
{
    add void->complex filter {
        complex x;

        init {
            x = 1 + 0i;
        }
        work push 1 { 
            push(x); 
            x.real++;
        }
    }
    int rows = 3;
    int cols = 4;

    //add Transpose(rows, cols);
    //add FFT2Dshift(cols, rows);    
    //add FFT2D(cols, rows, false);
    //add FFT2Dshift(cols, rows);
    //add Transpose(cols, rows);
    add FTY2D(rows, cols);
    add iFTY2D(rows, cols);
    //add FTX2D(rows, cols);
    //add iFTX2D(rows, cols);
    //add FTX1D(rows*cols);
    //add iFFT2D(rows, cols);

    add complex->void filter {
        work pop 1 {
            complex t = pop();
            print(t.real);
            print("+");
            print(t.imag);
            println("i");
        }
    }
    //add FileWriter<complex>("ffttest.bin");
}
*/

// Code adapted FROM getUserParameters.m and getSARparams*.m
// (rodric rabbah, <rabbah@mit.edu>)

static {
    float PI  = 3.14159265358979;
    float PI2 = 2 * PI;

    // getUserParameters.m
    float SCALE_FACTOR = 1.0;
    
    // getSARparams0.m
    float ASPECT_RATIO = 0.4;
    float RANGE_FACTOR = 10.0;
    
    /* synthetic aperture is 2*L */
    float L = 100 * SCALE_FACTOR;
    
    /* target area in cross-range is within */
    float Y0 = L;

    /* target area in range is within [Xc-X0,Xc+X0] */
    float X0 = Y0 * ASPECT_RATIO;

    /* range distance to center of target area */
    float Xc = Y0 * RANGE_FACTOR;                

    // getSARparams.m
    float RELATIVE_BANDWIDTH = 0.5;
    int   RPULSE = 75;

    /* propagation speed */
    float c = 3e8;

    /* carrier frequency */
    float fc = 400e6;

    /* spatial/geometric parameters */
    float Rmin = Xc - X0;
    float Rmax = sqrt(((Xc + X0)*(Xc + X0)) + ((Y0 + L)*(Y0 + L)));

    /* chirp pulse duration */
    float Tp = RPULSE / c;    

    /* baseband bandwidth */
    float f0 = 0.5 * RELATIVE_BANDWIDTH * fc;

    /* wavelength at highest frequency */
    float lambda_min = c / (fc + f0);

    init {}
}

// Provide math routines and utilities for printing streams
// (rodric rabbah, <rabbah@mit.edu>)

// convert a stream of complex to its complex conjugate
complex->complex filter Conjugate(int n) 
{
    work pop n push n {
        for (int i = 0; i < n; i++) {
            complex out = pop();
            out.imag = 0 - out.imag;
            push(out);
        }
    }
}

// output is absoluate value of complex input
complex->float filter complexAbsoluate 
{
    work pop 1 push 1 {
        complex in = pop();
        float  out = sqrt(pow(in.real, 2) +
                          pow(in.imag, 2));
        push(out);
    }
}

// transpose matrix of floating point value
float->float filter floatTranspose(int rows, int cols) {
    work push rows*cols pop rows*cols {
        for (int j = 0; j < cols; j++)
            for (int i = 0; i < rows; i++)
                push(peek(i * cols + j));
        for (int i = 0; i < rows*cols; i++)
            pop();
    }
}

complex->void filter PrintComplex(int n, int m, boolean transpose)
{
    work pop n*m {
        complex[n][m] t;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                t[i][j] = pop();
            }
        }

        if (!transpose) {
            for (int i = 0; i < n; i++)
                for (int j = 0; j < m; j++)
                    println(t[i][j].real);
            for (int i = 0; i < n; i++)
                for (int j = 0; j < m; j++)
                    println(t[i][j].imag);
        }
        else {
            for (int j = 0; j < m; j++)
                for (int i = 0; i < n; i++)
                    println(t[i][j].real);
            for (int j = 0; j < m; j++)
                for (int i = 0; i < n; i++)
                    println(t[i][j].imag);
        }
    }
}

