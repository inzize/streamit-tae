//Gregor Sievers gsievers@cit-ec.uni-bielefeld.de
//simple implementation of Matrix Multiplication with 1 work filter
// good implementation for single CPU
void->void pipeline MatrixMultSimple {
    //add intSource(10);
    add FileReader<int>();
		//caution: not tested with non-quadratic matrixes
//		add MatrixMultiply(2, 2, 2, 2);
		add MatrixMultiply(8, 8, 8, 8);
		//     add intPrinter();
	add FileWriter<int>("output.stream");
}
int->int filter  MatrixMultiply(int x0, int y0, int x1, int y1) {
	work pop x0*y0+x1*y1 push y0*x1 {
		int rows0 = x0;
		int cols0 = y0;
		int rows1 = x1;
		int cols1 = y1;
		int matrix2_start = rows0*cols0;
// 		println("Start calculation..");
		for(int j=0; j<rows1; j++)
		{
			for(int i=0; i<cols1; i++)
			{
				int result = 0;    
				for(int k=0; k<cols0; k++)
				{
// 					println("matr0:x",k,"y",j*cols0,": ",peek(k +j*cols0));
// 					println("matr1:x",i,"y",k*cols1,": ",peek(matrix2_start +i+k*cols1));
					
					result+=peek(k +j*cols0) * peek(matrix2_start +i+k*cols1);
				}
// 				println("res: ",result);
				push(result);
				//COREVA_HWACC_STD_OUT_PRINT_DATA(C[i][j]);
			}
		}
		for (int n = 0; n < rows0*cols0+rows1*cols1; n++) {
			pop();
		}
	}
}

void->int filter intSource(int maxNum) {    
    int num;
    init {
	num = 0;
    }
    work push 1 {
// 			println(num);
       push(num);
       num++;
       if (num == maxNum) num = 0;
    }
}

int->void filter intPrinter {
    work pop 1 {
	println("out: ", pop());
    }
}

int->void filter Sink {
    int x;
    init {
	x = 0;
    }
    work pop 1 {
	pop();
	x++;
	if (x == 100) {
	    println("done..");
	    x = 0;
	}
    }
}

